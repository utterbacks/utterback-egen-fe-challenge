import React, { useState } from "react";

// To do:
// Figure out how to only render pages necessary in
// new function or in getPaginationGroup(). Calculate maxPages
// in JobsList.jsx and pass to Pagination as a prop, use to limit
// size of final array generated by getPaginationGroup().

export default function Pagination({
	data,
	RenderComponent,
	pageLimit,
	dataLimit,
	maxPages,
}) {
	const [pages] = useState(Math.round(data.length / dataLimit));
	const [currentPage, setCurrentPage] = useState(1);

	function goToNextPage() {
		setCurrentPage((page) => page + 1);
	}

	function goToPreviousPage() {
		setCurrentPage((page) => page - 1);
	}

	function changePage(event) {
		const pageNumber = Number(event.target.textContent);
		setCurrentPage(pageNumber);
	}

	const getPaginatedData = () => {
		const startIndex = currentPage * dataLimit - dataLimit;
		const endIndex = startIndex + dataLimit;
		return data.slice(startIndex, endIndex);
	};

	const getPaginationGroup = () => {
		let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;
		return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);
	};

	return (
		<div>
			<div className="job-list">
				{getPaginatedData().map((d, idx) => (
					<RenderComponent key={idx} data={d} />
				))}
			</div>
			<div className="pagination">
				<button
					onClick={goToPreviousPage}
					className={`prev ${currentPage === 1 ? "disabled" : ""}`}
				>
					prev
				</button>
				{getPaginationGroup().map((item, index) => (
					<button
						key={index}
						onClick={changePage}
						className={`paginationItem ${
							currentPage === item ? "active" : null
						}`}
					>
						<span>{item}</span>
					</button>
				))}
				<button
					onClick={goToNextPage}
					className={`next ${currentPage === pages ? "disabled" : ""}
													${currentPage === maxPages ? "disabled" : ""}`}
				>
					next
				</button>
			</div>
		</div>
	);
}
